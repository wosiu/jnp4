W trakcie rozwiązywania tego zadania musisz wczuć się w rolę menedżera
korporacji zarządzającej małymi firmami. W skład każdej firmy może wchodzić
pewna nieujemna liczba przedsiębiorstw takich jak: kantory, sklepy myśliwskie
oraz biura rachunkowe. W celu ułatwienia przyszłego zarządzania tego typu
firmami musisz napisać odpowiednie oprogramowanie, które pomoże Ci dokonywać
przeróżnych operacji.

Dwie firmy, które posiadają dokładnie taką samą strukturę (tj. identyczną liczbę
kantorów, sklepów myśliwskich oraz biur rachunkowych), uważamy za równoważne.
Zbiór równoważnych firm możemy połączyć w grupę firm.

Rozwiązywanie zadania powinieneś zacząć od stworzenia typu szablonowego Company,
reprezentującego strukturę firmy. Następnie, używając Company, zdefiniuj typy:
Accountancy, Hunting_shop oraz Exchange_office, które odpowiadają małym firmom
składającym się odpowiednio z pojedynczego kantoru, sklepu myśliwskiego oraz
biura rachunkowego.

W celu ułatwienia opisywania struktury firm definiujemy dodatkowo następujące
typy.

template<class C1, class C2> struct add_comp;
Typ reprezentujący firmę powstałą z połączenia firm C1 i C2. Struktura powinna
zawierać publiczną definicję type, opisującą nową firmę.

template<class C1, class C2> struct remove_comp;
Typ reprezentujący firmę C1 pomniejszoną o firmę C2. Struktura powinna zawierać
publiczną definicję type, opisującą nową firmę.

template<class C, unsigned int n> struct multiply_comp;
Typ reprezentujący firmę powstałą z firmy C przez powiększenie n razy liczby
poszczególnych przedsiębiorstw. Struktura powinna zawierać publiczną definicję
type, opisującą nową firmę.


template<class C, unsigned int n> struct split_comp;
Potrzebny jest również typ, który ułatwi podział firmy na n mniejszych. Ten typ
reprezentuje firmę powstałą z firmy C przez pomniejszenie n razy liczby
poszczególnych przedsiębiorstw. Struktura powinna zawierać publiczną definicję
type, opisującą nową firmę.

template<class C> struct additive_expand_comp;
Bardzo przydatną operacją jest zwiększenie o jeden liczby wszystkich
przedsiębiorstw wchodzących w skład firmy. Napisz typ opisujący efekt takiej
operacji.

template<class C> struct additive_rollup_comp;
Czasami zdarza się, że musimy zamknąć po jednym przedsiębiorstwie każdego typu,
dlatego przygotuj strukturę, która będzie opisywać efekt takiej operacji.

Firmy mogą łączyć się w grupy. W tym celu stwórz szablon klasy Group<Company>,
parametryzowany strukturą pojedynczej firmy -- wszystkie firmy tworzące grupę są
równoważne (definicja na początku zadania).

Klasa Group<Company> powinna udostępniać następujące metody:

Group();
Konstruktor wywołany bez parametrów tworzy grupę składającą się tylko z jednej
firmy.

Group(unsigned int k);
Konstruktor wywołany z jednym parametrem tworzy grupę składającą się dokładnie
z k firm o identycznej strukturze.

Group(Group<Company> const &);
Potrzebny nam będzie również konstruktor tworzący nową grupę, która jest
identyczna z tą podaną jako argument.

unsigned int get_size() const;
Często będziemy korzystać z metody, która zwraca liczbę firm wchodzących w skład
grupy.

void set_acc_val(unsigned int i);
void set_hs_val(unsigned int i);
void set_exo_val(unsigned int i);
Napisz również metody pozwalające ustalać nową wartość biura rachunkowego,
sklepu myśliwskiego oraz kantoru. Początkowa wartość pojedynczego kantoru to 50,
sklepu myśliwskiego to 150, a biura rachunkowego to 15.

unsigned int get_acc_val() const;
unsigned int get_hs_val() const;
unsigned int get_exo_val() const;
Napisz metody pozwalające odczytać wartość biura rachunkowego, sklepu
myśliwskiego oraz kantoru.

unsigned int get_value() const;
W celu szybkiej wyceny grupy przyda się metoda zwracające wartość danej grupy,
czyli sumę wartośći wszystkich przedsiębiorstw wchodzących w skład tej grupy.

Wszystkie błędy, które niefortunnie mogłyby się znaleźć w przygotowanym przez
Ciebie programie mogłyby kosztować nas bardzo dużo pieniędzy, dlatego w celu
ułatwienia testowania klasa Group<Company> powinna zawierać publiczną definicję
typu reprezentującego strukturę pojedynczej firmy o nazwie company_type oraz
zmienną statyczną company typu company_type.

Oczekujemy również, że zaimplementujesz następujące operatory.

Operatory dodawania i odejmowania na grupach firm: +, -, +=, -=. Dodawane i
odejmowane mogą być tylko grupy równoważnych firm. W wyniku takich działań
liczba firm w grupie wynikowej zachowuje się zgodnie z naturalnymi regułami tych
działań. Wartość pojedynczego przedsiębiorstwa w nowej grupie liczymy jako
średnią ważoną wartości firm z sumowanych grup, czyli przykładowo dla operacji
g0 = g1 - g2 wartość kantoru wyznacza się formułą:

wartość kantoru w g0 := (liczba kantorów w g1 * wartość kantoru w g1 -
                         liczba kantorów w g2 * wartość kantoru w g2) /
                        liczba kantorów w g0

Operatory mnożenia i dzielenia grupy firm przez nieujemną liczbę całkowitą: *,
/, *=, /=. Operacje te modyfikują liczność grupy zgodnie z ich naturalnymi
regułami. Przy mnożeniu grupy przez n wartość pojedynczego przedsiębiorstwa
ulega zmniejszeniu n razy, a przy dzieleniu grupy przez n zwiększa się n razy.
Zawsze dzielimy całkowitoliczbowo i odrzucamy ewentualną resztę.

Operatory porównywania grup firm: ==, !=, <, >, <=, >=. Pamiętaj, że w
krytycznych sytuacjach nie jest istotne, ile mamy biur rachunkowych. Liczy się
tylko liczba kantorów (czyli kasa) oraz sklepów myśliwskich (broń). Posiadanie
większej liczby przedsiębiorstw tych dwóch typów czyni nas silniejszymi od
przeciwnika. Porządek na grupach nie jest liniowy.

Operator << wypisujący na strumień opis grupy.

Bardzo liczymy również na to, że napiszesz następujące funkcje globalne.

template<class C>
Group<typename additive_expand_comp<C>::type> const
additive_expand_group(Group<C> const &s1);
Zwiększa o jeden liczbę przedsiębiorstw (wszystkich typów) wchodzących w skład
każdej firmy należącej do grupy s1, nie zmieniając wartości pojedynczego
przedsiębiorstwa.

template<class C>
Group<typename multiply_comp<C, 10>::type> const
multiplicative_expand_group(Group<C> const &s1);
Zwiększa dziesięciokrotnie liczbę przedsiębiorstw (wszystkich typów) wchodzących
w skład każdej firmy należącej do grupy s1, nie zmieniając wartości pojedynczego
przedsiębiorstwa.

template<class C>
Group<typename additive_rollup_comp<C>::type> const
additive_rollup_group(Group<C> const &s1);
Zmniejsza o jeden liczbę przedsiębiorstw (wszystkich typów) wchodzących w skład
każdej firmy należącej do grupy s1, nie zmieniając wartości pojedynczego
przedsiębiorstwa.

template<class C>
Group<typename split_comp<C, 10>::type> const
multiplicative_rollup_group(Group<C> const &s1);
Zmniejsza dziesięciokrotnie liczbę przedsiębiorstw (wszystkich typów)
wchodzących w skład każdej firmy należącej do grupy s1, nie zmieniając wartości
pojedynczego przedsiębiorstwa.

template<class C1, class C2, class C3>
bool
solve_auction(Group<C1> const &g1, Group<C2> const &g2, Group<C3> const &g3);
Funkcja, która pomoże nam określać, czy możliwe jest wyłonienie zwycięzcy
przetargu (nie zawsze jest to możliwe) w przypadku, gdy startują w nim grupy g1,
g2 oraz g3. Zwycięzcą zostaje grupa, która jest największa w sensie porządku
zdefiniowanego na grupach.

Uwagi końcowe dotyczące wykonywania działań arytmetycznych:
- dzielenie jest zawsze całkowitoliczbowe, resztę odrzucamy;
- jeśli dzielnik ma wartość zero, to wynikiem dzielenia ma być zero;
- jeśli odjemna jest mniejsza od odjemnika, to wynikiem odejmowania ma być zero.

Przykład użycia

#include <typeinfo>
#include <cassert>
#include <iostream>
#include <vector>

#include "holding.hh"

typedef add_comp<Accountancy, Exchange_office>::type small_company;
typedef add_comp<multiply_comp<Hunting_shop, 10>::type, multiply_comp<Exchange_office, 20>::type>::type money;
typedef add_comp<multiply_comp<Hunting_shop, 30>::type, multiply_comp<Exchange_office, 10>::type>::type guns;

int main() {
  Group<Accountancy> s1;
  Group<money> s2(20);
  Group<money> s3(20);
  Group<Exchange_office> s4;
  Group<guns> s5(20);

  assert((s2 + s3).get_size() == 40);
  assert((s2 += s2).get_size() == 40);
  assert(s2.get_size() == 40);
  assert((s2 - s3).get_size() == 20);
  assert((s3 - s2).get_size() == 0);

  s3.set_exo_val(25);

  std::cout << s2;
  std::cout << s3;
  std::cout << s2 + s3;
  std::cout << s2 - s3;
  std::cout << s2 * 4;
  std::cout << s2 / 2;

  assert((s2 + s3).get_value() == 139200);
  assert((s2 - s3).get_value() == 60000);
  assert((s2 * 4).get_value() == 97600);
  assert((s2 / 2).get_value() == 100000);

  assert(s2 > s3);
  assert(s1 != s4);
  assert(s1 == s1);

  assert(typeid(add_comp<Accountancy, Exchange_office>::type) == typeid(small_company));
  assert(typeid(remove_comp<small_company, Accountancy>::type) == typeid(Exchange_office));
  assert(typeid(split_comp<small_company, 2>::type) == typeid(Company<0, 0, 0>));
  assert(typeid(additive_rollup_comp<multiply_comp<small_company, 2>::type>::type) ==
         typeid(small_company));
  assert(typeid(additive_expand_comp<small_company>::type) ==
         typeid(add_comp<Hunting_shop, multiply_comp<small_company, 2>::type>::type));

  assert(typeid(Group<add_comp<Accountancy, Exchange_office>::type>::company_type) ==
         typeid(small_company));
  assert(typeid(additive_expand_group(s1).company) ==
         typeid(add_comp<multiply_comp<Accountancy, 2>::type,
                add_comp<Hunting_shop, Exchange_office>::type>::type));
  assert(typeid(additive_rollup_group(s1).company) == typeid(Company<0,0,0>));
  assert(typeid(multiplicative_expand_group(s1).company) ==
         typeid(multiply_comp<Accountancy, 10>::type));
  assert(typeid(multiplicative_rollup_group(s5).company) ==
         typeid(add_comp<multiply_comp<Hunting_shop, 3>::type, Exchange_office>::type));

  assert(solve_auction(s1, s2, s5) == false);
}

Powyższy przykład wypisuje na standardowe wyjście:

Number of companies: 40; Value: 100000
Accountancies value: 15, Hunting shops value: 150, Exchange offices value: 50
Accountancies: 0, Hunting shops: 10, Exchange offices: 20
Number of companies: 20; Value: 40000
Accountancies value: 15, Hunting shops value: 150, Exchange offices value: 25
Accountancies: 0, Hunting shops: 10, Exchange offices: 20
Number of companies: 60; Value: 139200
Accountancies value: 15, Hunting shops value: 150, Exchange offices value: 41
Accountancies: 0, Hunting shops: 10, Exchange offices: 20
Number of companies: 20; Value: 60000
Accountancies value: 15, Hunting shops value: 150, Exchange offices value: 75
Accountancies: 0, Hunting shops: 10, Exchange offices: 20
Number of companies: 160; Value: 97600
Accountancies value: 3, Hunting shops value: 37, Exchange offices value: 12
Accountancies: 0, Hunting shops: 10, Exchange offices: 20
Number of companies: 20; Value: 100000
Accountancies value: 30, Hunting shops value: 300, Exchange offices value: 100
Accountancies: 0, Hunting shops: 10, Exchange offices: 20

Rozwiązanie powinno składać się z pliku holding.hh.
Plik ten należy umieścić w repozytorium w katalogu
